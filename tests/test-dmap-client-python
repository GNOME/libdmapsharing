#!/usr/bin/env python3

import gi
import sys

gi.require_version('DMAP', '3.2')
gi.require_version('DAAP', '3.2')

from gi.repository import GObject
from gi.repository import GLib
from gi.repository import DMAP
from gi.repository import DAAP

import testpython

class TestDMAPClient(GObject.GObject):
    def __init__(self):
        super(TestDMAPClient, self).__init__()

        self.factory = testpython.PyDAAPRecordFactory()
        self.db      = testpython.PyDMAPDb()
        self.browser = DMAP.MdnsBrowser.new(DMAP.MdnsServiceType.DAAP)

    def start(self):
        self.browser.connect('service-added', self.service_added_cb, None)
        self.browser.start()

    def print_record(self, id, record, user_data):
        location    = record.get_property('location')
        title       = record.get_property('title')
        songalbum   = record.get_property('songalbum')
        sort_album  = record.get_property('sort-album')
        songartist  = record.get_property('songartist')
        sort_artist = record.get_property('sort-artist')
        songgenre   = record.get_property('songgenre')
        format      = record.get_property('format')
        rating      = record.get_property('rating')
        filesize    = record.get_property('filesize')
        duration    = record.get_property('duration')
        track       = record.get_property('track')
        year        = record.get_property('year')
        firstseen   = record.get_property('firstseen')
        mtime       = record.get_property('mtime')
        disc        = record.get_property('disc')
        bitrate     = record.get_property('bitrate')
        has_video   = record.get_property('has_video')
        mediakind   = record.get_property('mediakind')
        songalbumid = record.get_property('songalbumid')

        print('id:',            id)
        print('  location:',    location)
        print('  title:',       title)
        print('  songalbum:',   songalbum)
        print('  sort_album:',  sort_album)
        print('  songartist:',  songartist)
        print('  sort_artist:', sort_artist)
        print('  songgenre:',   songgenre)
        print('  format:',      format)
        print('  rating:',      rating)
        print('  filesize:',    filesize)
        print('  duration:',    duration)
        print('  track:',       track)
        print('  year:',        year)
        print('  firstseen:',   firstseen)
        print('  mtime:',       mtime)
        print('  disc:',        disc)
        print('  bitrate:',     bitrate)
        print('  has_video:',   has_video)
        print('  mediakind:',   mediakind)
        print('  songalbumid:', songalbumid)

    def authenticate_cb(self, connection, name, session, msg, auth, retrying):
        username = connection.get_property('username')
        print('Require password for %s@%s: ' % (username, name), end='', file=sys.stderr)
        password = input()
        connection.set_property('password', password)
        auth.authenticate(username, password)
        session.unpause_message(msg)

    def connected_cb(self, connection, result, reason, user_data):
        self.db.foreach(self.print_record, None)

    def service_added_cb(self, browser, service, user_data):
        service_name = service.get_property('service-name')
        name         = service.get_property('name')
        host         = service.get_property('host')
        port         = service.get_property('port')

        connection = DAAP.Connection.new(service_name, host, port, self.db, self.factory)
        connection.connect('authenticate', self.authenticate_cb)
        connection.start(self.connected_cb, self.db)

client = TestDMAPClient ()
client.start ()
GLib.MainLoop().run()
